---
---

<div class="dark-mode-toggle">
  <button id="theme-toggle" class="theme-btn" aria-label="Basculer le mode sombre">
    <!-- Theme Toggle Container -->
    <div class="theme-toggle-container">
      <!-- Background Track -->
      <div class="theme-track">
        <!-- Sliding Indicator -->
        <div class="theme-slider">
          <!-- Sun Icon -->
          <div class="theme-icon sun-icon">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/>
            </svg>
          </div>
          
          <!-- Moon Icon -->
          <div class="theme-icon moon-icon">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"/>
            </svg>
          </div>
        </div>
      </div>
      
      <!-- Optional Text Label -->
      <span class="theme-label">
        <span class="light-label">Clair</span>
        <span class="dark-label">Sombre</span>
      </span>
    </div>
  </button>
</div>

<style>
  .dark-mode-toggle {
    position: relative;
  }

  .theme-btn {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 8px 12px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border: 2px solid rgba(99, 102, 241, 0.15);
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 13px;
    font-weight: 600;
    color: #6b7280;
    box-shadow: 
      0 4px 20px rgba(99, 102, 241, 0.08),
      inset 0 1px 0 rgba(255, 255, 255, 0.8);
    position: relative;
    overflow: hidden;
  }

  .theme-btn::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, #6366f1, #d946ef, #eab308);
    opacity: 0;
    transition: opacity 0.4s ease;
    border-radius: 18px;
  }

  .theme-btn:hover {
    transform: translateY(-2px);
    box-shadow: 
      0 8px 30px rgba(99, 102, 241, 0.15),
      inset 0 1px 0 rgba(255, 255, 255, 0.9);
    border-color: rgba(99, 102, 241, 0.25);
  }

  .theme-btn:hover::before {
    opacity: 0.05;
  }

  .theme-btn:active {
    transform: translateY(0);
    transition: transform 0.1s ease;
  }

  /* Toggle Container */
  .theme-toggle-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  /* Track (Background) */
  .theme-track {
    position: relative;
    width: 52px;
    height: 28px;
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    border-radius: 20px;
    border: 2px solid rgba(148, 163, 184, 0.2);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 
      inset 0 2px 4px rgba(0, 0, 0, 0.06),
      inset 0 -1px 0 rgba(255, 255, 255, 0.8);
  }

  /* Sliding Indicator */
  .theme-slider {
    position: absolute;
    top: 2px;
    left: 2px;
    width: 20px;
    height: 20px;
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 50%;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 
      0 2px 8px rgba(0, 0, 0, 0.15),
      0 1px 2px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Theme Icons */
  .theme-icon {
    position: absolute;
    width: 12px;
    height: 12px;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-icon svg {
    width: 100%;
    height: 100%;
  }

  .sun-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
    color: #f59e0b;
  }

  .moon-icon {
    opacity: 0;
    transform: rotate(180deg) scale(0.8);
    color: #6366f1;
  }

  /* Text Label */
  .theme-label {
    position: relative;
    overflow: hidden;
    height: 16px;
    width: 50px;
    font-size: 12px;
    font-weight: 600;
    letter-spacing: 0.025em;
  }

  .light-label,
  .dark-label {
    position: absolute;
    left: 0;
    top: 0;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    white-space: nowrap;
  }

  .light-label {
    opacity: 1;
    transform: translateY(0);
  }

  .dark-label {
    opacity: 0;
    transform: translateY(100%);
  }

  /* Dark mode styles */
  :global(.dark) .theme-btn {
    background: rgba(17, 24, 39, 0.95);
    color: #d1d5db;
    border-color: rgba(255, 255, 255, 0.15);
    box-shadow: 
      0 4px 20px rgba(0, 0, 0, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  :global(.dark) .theme-btn:hover {
    border-color: rgba(255, 255, 255, 0.25);
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.15);
  }

  :global(.dark) .theme-track {
    background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
    border-color: rgba(255, 255, 255, 0.1);
    box-shadow: 
      inset 0 2px 4px rgba(0, 0, 0, 0.3),
      inset 0 -1px 0 rgba(255, 255, 255, 0.05);
  }

  :global(.dark) .theme-slider {
    transform: translateX(24px);
    background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
    box-shadow: 
      0 2px 8px rgba(0, 0, 0, 0.4),
      0 1px 2px rgba(0, 0, 0, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  :global(.dark) .sun-icon {
    opacity: 0;
    transform: rotate(-180deg) scale(0.8);
  }

  :global(.dark) .moon-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  :global(.dark) .light-label {
    opacity: 0;
    transform: translateY(-100%);
  }

  :global(.dark) .dark-label {
    opacity: 1;
    transform: translateY(0);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .theme-btn {
      padding: 6px 10px;
      gap: 8px;
    }
    
    .theme-track {
      width: 44px;
      height: 24px;
    }
    
    .theme-slider {
      width: 16px;
      height: 16px;
    }
    
    .theme-icon {
      width: 10px;
      height: 10px;
    }
    
    :global(.dark) .theme-slider {
      transform: translateX(20px);
    }
    
    .theme-label {
      display: none;
    }
  }

  @media (max-width: 475px) {
    .theme-btn {
      padding: 4px 8px;
    }
    
    .theme-track {
      width: 40px;
      height: 22px;
    }
    
    .theme-slider {
      width: 14px;
      height: 14px;
    }
    
    :global(.dark) .theme-slider {
      transform: translateX(18px);
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .theme-btn {
      border-width: 3px;
      border-color: #6366f1;
    }
    
    .theme-track {
      border-width: 2px;
      border-color: #374151;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .theme-btn,
    .theme-track,
    .theme-slider,
    .theme-icon,
    .light-label,
    .dark-label {
      transition: none;
    }
  }

  /* Focus styles for accessibility */
  .theme-btn:focus-visible {
    outline: 3px solid #6366f1;
    outline-offset: 2px;
    border-radius: 20px;
  }

  /* Hover effects enhancement */
  .theme-btn:hover .theme-slider {
    box-shadow: 
      0 4px 12px rgba(99, 102, 241, 0.2),
      0 2px 4px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.9);
  }

  :global(.dark) .theme-btn:hover .theme-slider {
    box-shadow: 
      0 4px 12px rgba(99, 102, 241, 0.3),
      0 2px 4px rgba(0, 0, 0, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.15);
  }

  /* Animation for theme change */
  .theme-changing .theme-slider {
    animation: themeChangeAnimation 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  @keyframes themeChangeAnimation {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }
</style>

<script>
  class ThemeManager {
    private currentTheme: 'light' | 'dark' = 'light';
    private button: HTMLElement | null = null;
    
    constructor() {
      this.init();
    }
    
    private init() {
      this.currentTheme = this.getInitialTheme();
      this.button = document.getElementById('theme-toggle');
      this.applyTheme(this.currentTheme);
      this.bindEvents();
    }
    
    private getInitialTheme(): 'light' | 'dark' {
      if (typeof window !== 'undefined') {
        const stored = localStorage.getItem('theme') as 'light' | 'dark';
        if (stored && ['light', 'dark'].includes(stored)) {
          return stored;
        }
        
        // Check system preference
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
      }
      return 'light';
    }
    
    private bindEvents() {
      this.button?.addEventListener('click', () => {
        this.toggleTheme();
      });
      
      // Listen for system theme changes
      if (typeof window !== 'undefined' && window.matchMedia) {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
          if (!localStorage.getItem('theme')) {
            this.setTheme(e.matches ? 'dark' : 'light');
          }
        });
      }
      
      // Keyboard support
      this.button?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggleTheme();
        }
      });
    }
    
    private toggleTheme() {
      const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
      this.setTheme(newTheme);
    }
    
    private setTheme(theme: 'light' | 'dark') {
      this.currentTheme = theme;
      localStorage.setItem('theme', theme);
      this.applyTheme(theme);
      this.showThemeChangeEffect();
    }
    
    private applyTheme(theme: 'light' | 'dark') {
      const html = document.documentElement;
      
      if (theme === 'dark') {
        html.classList.add('dark');
      } else {
        html.classList.remove('dark');
      }
      
      // Update meta theme-color for mobile browsers
      const metaThemeColor = document.querySelector('meta[name="theme-color"]');
      if (metaThemeColor) {
        metaThemeColor.setAttribute('content', theme === 'dark' ? '#111827' : '#ffffff');
      } else {
        const meta = document.createElement('meta');
        meta.name = 'theme-color';
        meta.content = theme === 'dark' ? '#111827' : '#ffffff';
        document.head.appendChild(meta);
      }
      
      // Update button aria-label
      if (this.button) {
        this.button.setAttribute('aria-label', 
          theme === 'dark' ? 'Passer en mode clair' : 'Passer en mode sombre'
        );
      }
    }
    
    private showThemeChangeEffect() {
      // Add animation class
      this.button?.classList.add('theme-changing');
      
      // Create ripple effect
      const ripple = document.createElement('div');
      ripple.style.cssText = `
        position: absolute;
        inset: 0;
        background: ${this.currentTheme === 'dark' ? 'radial-gradient(circle, rgba(99, 102, 241, 0.3) 0%, transparent 70%)' : 'radial-gradient(circle, rgba(234, 179, 8, 0.3) 0%, transparent 70%)'};
        border-radius: 20px;
        opacity: 0;
        pointer-events: none;
        animation: rippleEffect 0.6s ease-out;
      `;
      
      this.button?.appendChild(ripple);
      
      // Cleanup
      setTimeout(() => {
        this.button?.classList.remove('theme-changing');
        ripple.remove();
      }, 600);
      
      // Body transition effect
      const body = document.body;
      body.style.transition = 'background-color 0.4s ease, color 0.4s ease';
      
      // Subtle page flash effect
      const flash = document.createElement('div');
      flash.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: ${this.currentTheme === 'dark' ? '#000' : '#fff'};
        opacity: 0.05;
        pointer-events: none;
        z-index: 9999;
        transition: opacity 0.3s ease;
      `;
      
      document.body.appendChild(flash);
      
      setTimeout(() => {
        flash.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(flash);
        }, 300);
      }, 50);
    }
  }
  
  // Add ripple effect keyframes
  const style = document.createElement('style');
  style.textContent = `
    @keyframes rippleEffect {
      0% {
        opacity: 0;
        transform: scale(0.8);
      }
      50% {
        opacity: 1;
        transform: scale(1.1);
      }
      100% {
        opacity: 0;
        transform: scale(1.3);
      }
    }
  `;
  document.head.appendChild(style);
  
  document.addEventListener('DOMContentLoaded', () => {
    new ThemeManager();
  });
</script>